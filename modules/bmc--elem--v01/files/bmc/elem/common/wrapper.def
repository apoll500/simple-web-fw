
//MODULE::

/*
First, we define the basic properties of the element.
*/

DEF ELEMENT
{
    //The name of the element.
    //This is equal to the name of the (sub-)project in baseman.
    //Overwrite this in the element definition file.
    element_name="default";
    //The styles in which this element can be created.
    //Only the default style (or all styles which are applyable to all elements), should be stated here. This property can be overloaded or overwritten in subdefs.
    element_style="default";
    //You can add more styles, if needed. Individual styles should be stated on a per element basis within the element definition files.
    //style="";
}

DEF ELEMENT_STYLE_ALIAS
{
    load_impl_file
    {
        ->
        main_loader.load("js/elements/@element_name/@element_name[]_@name[]\.js");
        <-
    }
    impl_name="@name";
    construct_element
    {
        ->
                case "@name":
                    this.object=new @element_name[]_@impl_name(@extra_parameter[]pdiv,this);
                    break;
        <--
        extra_parameter
        {
            ->
            @<@impl_name[text="element_#"]>.pass_wrapper_parameter[value='true',text='@element_wrapper.parameter_name_extra[end=","]']
            <--
        }
    }
}

DEF ELEMENT_STYLE:ELEMENT_STYLE_ALIAS
{
}

/*
We create a wrapper class for every element. The wrapper class is called <element>_wrapper(), where <element> is the name of the element.
*/

DEF WRAPPER:ELEMENT
{
    has_postloadfunction="false";
    has_load_method="false";
    has_load2_method="false";
    has_scroll_method="false";
    has_window_scroll_method="false";
    has_inputs="false";
    
    class_name="@element_name[]_wrapper";
    implclass_name_default="@element_name[]_@element_style_default";
    parameter_name="pdiv";
    parameter_name="style";
    //parameter_name="this";
    wrapper
    {
        ->
        //FILE: js/elements/@PATH
        @GTEXT.BMC_INFO
        @element_style:elem.ELEMENT_STYLE[].load_impl_file
        main_loader.load("js/http/common.js");
        @additional_includes
        @additional_code
        //class:
        function @class_name(@parameter_name_extra[end=',']@parameter_name[sep=','])
        {
        //constructor:
            this.object;
            this.name="@element_virtual_name";
            @constructor_extra
            
            switch(style)
            {
                @element_style[sep='
                '].construct_element
                default:
                    this.object=new @element_name[]_@element_style_default(pdiv,this);
            }
            
        //public:
            this.destroy=function()
            {
                this.object.destroy();
            }
            @has_load_method[value='true',text='
            this.load=function(url)
            {
                httpGetAsync(url,receive_text,this);
            }
            ']
            @has_load2_method[value='true',text=`
            this.load2=function(content,layout)
            {
                this.object.layout=layout;
                this.content_token=content;
                
                this.object.preset();
                
                this.reset();
                
                if(content.charAt(0)=='_')
                {
                    httpGetAsync(baseurl+"php/"+content.substr(1)+".php",receive_text,this);
                }
                else
                {
                    httpGetAsync(baseurl+"content/"+lang+"/"+content+".txt",receive_text,this);
                }
            }
            `]
            @reset_method[text='
            this.reset=function()
            {
                #
            }
            ']
            @setup_method[text='
            this.setup=function(s)
            {
                #
            }
            ']
            @has_scroll_method[value='true',text='
            this.scroll=function(x,y)
            {
                this.object.box.scrollTop=y;
                this.object.box.scrollLeft=x;
            }
            ']
            @has_window_scroll_method[text='
            this.scroll=function(x,y)
            {
                window.scrollTo(x,y);
            }
            ']
            
        //private:
            @has_inputs[value='true',text='
            this.check_inputs=function()
            {
                this.object.check_inputs();
            }
            this.check_inputs2=function(module)
            {
                this.object.check_inputs2(module);
            }
            ']
            @has_postloadfunction[value='true',text='
            this.postloadfunction=null;
            this.postloadfunction_elem="";
            this.postloadfunction_data="";
            this.setpostloadfunction=function(func,elem,data)
            {
                this.postloadfunction=func;
                this.postloadfunction_elem=elem;
                this.postloadfunction_data=data;
            }
            ']
        }
        
        main_loader.ready();
        <-
    }
    setup_method
    {
        ->
                elements_setup(s,this,style);
        <-
    }
}

DEF the_element_wrapper:element,element_wrapper,FILE
{
    PATH="@element_name/@element_name[]_wrapper.js";
    OUTPUT
    {
        ->
        @wrapper
        <-
    }
}
